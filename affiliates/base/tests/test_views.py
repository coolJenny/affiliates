from django.test.client import RequestFactory
from django.views.defaults import server_error

import basket
from funfactory.urlresolvers import reverse
from mock import ANY, Mock, patch
from nose.tools import eq_, ok_

from affiliates.base import views
from affiliates.base.tests import aware_datetime, NewsItemFactory, TestCase
from affiliates.links.models import Link
from affiliates.links.tests import LinkFactory
from affiliates.users.tests import UserFactory


class ErrorPageTests(TestCase):
    def setUp(self):
        self.factory = RequestFactory()

        self._in_facebook_app_patch = patch('affiliates.base.views.in_facebook_app')
        self.in_facebook_app = self._in_facebook_app_patch.start()

    def tearDown(self):
        self._in_facebook_app_patch.stop()

    def test_404(self):
        request = self.factory.get('/')
        self.in_facebook_app.return_value = False

        with patch('affiliates.base.views.page_not_found') as page_not_found:
            eq_(views.handler404(request), page_not_found.return_value)

            self.in_facebook_app.assert_called_with(request)
            page_not_found.assert_called_with(request)

    def test_facebook_404(self):
        request = self.factory.get('/')
        self.in_facebook_app.return_value = True

        with patch('affiliates.base.views.render') as render:
            eq_(views.handler404(request), render.return_value)

            self.in_facebook_app.assert_called_with(request)
            render.assert_called_with(request, 'facebook/error.html', status=404)

    def test_500(self):
        request = self.factory.get('/')
        self.in_facebook_app.return_value = False

        with patch('affiliates.base.views.server_error') as server_error:
            eq_(views.handler500(request), server_error.return_value)

            self.in_facebook_app.assert_called_with(request)
            server_error.assert_called_with(request)

    def test_facebook_500(self):
        request = self.factory.get('/')
        self.in_facebook_app.return_value = True

        with patch('affiliates.base.views.render') as render:
            eq_(views.handler500(request), render.return_value)

            self.in_facebook_app.assert_called_with(request)
            render.assert_called_with(request, 'facebook/error.html', status=500)

    def test_500_renders(self):
        """
        Ensure that the built-in 500 view can render without errors.
        """
        request = self.factory.get('/')
        server_error(request)  # No exceptions! Hopefully, at least.



class HomeTests(TestCase):
    def setUp(self):
        self.factory = RequestFactory()

    def test_not_authenticated(self):
        """
        If the current user isn't authenticated, render the home
        page with the correct stats.
        """
        request = self.factory.get('/')
        request.user = Mock()
        request.user.is_authenticated.return_value = False

        # User count = 27 + 3 autogenerated via related factory
        # Link count = 3 autogenerated via related factory
        UserFactory.create_batch(27)
        LinkFactory.create_batch(3)


        with patch('affiliates.base.views.render') as render:
            with patch.object(Link.objects, 'total_link_clicks', return_value=64):
                eq_(views.home(request), render.return_value)
                render.assert_called_with(request, 'base/home.html', {
                    'affiliate_count': 30,
                    'link_count': 3,
                    'click_count': 64
                })

    def test_authenticated(self):
        """
        If the current user is authenticated, redirect to the dashboard.
        """
        request = self.factory.get('/')
        request.user = Mock()
        request.user.is_authenticated.return_value = True

        response = views.home(request)
        self.assertRedirectsNoFollow(response, reverse('base.dashboard'))


class DashboardTests(TestCase):
    def test_latest_newsitem(self):
        """
        Pass the most-recently-created visible NewsItem to the template
        context.
        """
        old_newsitem = NewsItemFactory.create(visible=True)
        old_newsitem.created = aware_datetime(2014, 1, 1)
        old_newsitem.save()

        non_visible_newsitem = NewsItemFactory.create(visible=False)
        non_visible_newsitem.created = aware_datetime(2014, 1, 5)
        non_visible_newsitem.save()

        visible_newsitem = NewsItemFactory.create(visible=True)
        visible_newsitem.created = aware_datetime(2014, 1, 4)
        visible_newsitem.save()

        request = Mock(user=UserFactory.create())
        with patch('affiliates.base.views.render') as render:
            views.dashboard(request)

        render.assert_called_with(request, 'base/dashboard.html', {
            'links': ANY,
        })

    def test_no_available_newsitem(self):
        """
        If there are no visible NewsItems, pass None to the template
        context.
        """
        NewsItemFactory.create_batch(3, visible=False)

        request = Mock(user=UserFactory.create())
        with patch('affiliates.base.views.render') as render:
            views.dashboard(request)

        render.assert_called_with(request, 'base/dashboard.html', {
            'links': ANY,
        })


class NewsletterSubscribeTests(TestCase):
    def setUp(self):
        self.factory = RequestFactory()

        patcher = patch('affiliates.base.views.basket.subscribe')
        self.addCleanup(patcher.stop)
        self.subscribe = patcher.start()

    def test_invalid_form_returns_success(self):
        """Test that even if the form is invalid, return a 200 OK."""
        request = self.factory.post('/', {'country': 'does.not.exist'})
        response = views.newsletter_subscribe(request)
        eq_(response.status_code, 200)
        ok_(not self.subscribe.called)

    def test_valid_form_call_basket(self):
        """If the form is valid, call basket with the proper arguments."""
        request = self.factory.post('/', {
            'email': 'test@example.com',
            'country': 'us',
            'format': 'text',
            'privacy_policy_agree': True
        })
        response = views.newsletter_subscribe(request)
        eq_(response.status_code, 200)
        self.subscribe.assert_called_with('test@example.com', 'affiliates', format='text',
                                          country='us', source_url=ANY)

    def test_basket_error_log(self):
        """If basket throws an exception, log it and return a 500."""
        self.subscribe.side_effect = basket.BasketException
        request = self.factory.post('/', {
            'email': 'test@example.com',
            'country': 'us',
            'format': 'text',
            'privacy_policy_agree': True
        })
        with patch('affiliates.base.views.log') as mock_log:
            response = views.newsletter_subscribe(request)

        eq_(response.status_code, 500)
        self.subscribe.assert_called_with('test@example.com', 'affiliates', format='text',
                                          country='us', source_url=ANY)
        ok_(mock_log.error.called)
